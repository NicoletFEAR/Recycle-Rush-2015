package com.nicoletfear.Robot2015;

import com.nicoletfear.Robot2015.commands.ArmStop;
import com.nicoletfear.Robot2015.commands.ArmUp;
//import com.nicoletfear.Robot2015.commands.AutonomousCommand;

import com.nicoletfear.Robot2015.commands.ArmUp;
import com.nicoletfear.Robot2015.commands.Drive;
import  com.nicoletfear.Robot2015.RobotMap;
import  com.nicoletfear.Robot2015.commands.ArmUp;
import  com.nicoletfear.Robot2015.commands.ArmDown;

import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.nicoletfear.Robot2015.commands.ExampleCommand;
import com.nicoletfear.Robot2015.xbox.Buttons;
import com.nicoletfear.Robot2015.subsystems.dog;
import com.nicoletfear.Robot2015.Robot;

import edu.wpi.first.wpilibj.Joystick;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */

public class OI {
	//public static final Joystick driveStick = new Joystick(Subsystems.rioCheck.getPortNumber(0)); 
	public static final Joystick driveStick = new Joystick(Subsystems.rioCheck.getPortNumber(0)); 
	public static final Joystick driveStickTwo = new Joystick(Subsystems.rioCheck.getPortNumber(1)); 
	
	public static final Joystick gameMech = new Joystick(Subsystems.rioCheck.getPortNumber(2));
	
	public static final Button startButtonOnDrive = new JoystickButton(driveStick , Buttons.Start);
	public static final Button aButtonOnDrive = new JoystickButton(driveStick, Buttons.A);
	public static final Button bButtonOnDrive = new JoystickButton(driveStick, Buttons.B);
	
	public static Button yButton = new JoystickButton(gameMech , Buttons.Y);
	public static Button aButton = new JoystickButton(gameMech , Buttons.A);
	public static Button bButton = new JoystickButton(gameMech , Buttons.B);
	
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
	static
	{
		SmartDashboard.putData(Subsystems.driveTrain);
		startButtonOnDrive.cancelWhenPressed(Robot.checkControllers);
	}
	public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		
		yButton.whenPressed(new ArmUp());
		aButton.whenPressed(new ArmDown());
		bButton.whenPressed(new ArmStop());
	    
        // SmartDashboard Buttons
        
		
        SmartDashboard.putData("ArmUp", new ArmUp());
        
       // RobotMap.dogMotor.set(0.25);


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}

